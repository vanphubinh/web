/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

import type { paths } from "../schema";
import type { AreAllOptional, MutationFiltersByMutationKey, MutationFiltersByParameters, MutationVariables, RequestFnResponse, ServiceOperationMutationFnOptions, ServiceOperationMutationKey, ServiceOperationUseMutationOptions } from "@openapi-qraft/tanstack-query-react-types";
import type { UseMutationResult } from "@tanstack/react-query";
import type { Mutation, MutationState } from "@tanstack/query-core";
export interface ProductService {
    /**
     * @summary Create a new product
     * @description Create a new product with payload containing product name, type, subtype, uom, price, cost, category, and description
     */
    createProduct: {
        /**
         * @summary Create a new product
         * @description Create a new product with payload containing product name, type, subtype, uom, price, cost, category, and description
         */
        getMutationKey(parameters: CreateProductParameters | void): ServiceOperationMutationKey<CreateProductSchema, CreateProductParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.productService.createProduct.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.productService.createProduct.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends CreateProductBody, TContext = unknown>(parameters: CreateProductParameters, options?: ServiceOperationUseMutationOptions<CreateProductSchema, CreateProductData, CreateProductParameters, TVariables, CreateProductError | Error, TContext>): UseMutationResult<CreateProductData, CreateProductError | Error, AreAllOptional<TVariables> extends true ? TVariables | void : TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.productService.createProduct.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.productService.createProduct.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<CreateProductBody, CreateProductParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<CreateProductSchema, CreateProductData, CreateProductParameters, TVariables, CreateProductError | Error, TContext>): UseMutationResult<CreateProductData, CreateProductError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @summary Create a new product
         * @description Create a new product with payload containing product name, type, subtype, uom, price, cost, category, and description
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const createProductTotal = qraft.productService.createProduct.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const createProductTotal = qraft.productService.createProduct.useIsMutating({
         *     parameters: {}
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<CreateProductBody, CreateProductData, CreateProductParameters, CreateProductError | Error, TContext> | MutationFiltersByMutationKey<CreateProductSchema, CreateProductBody, CreateProductData, CreateProductParameters, CreateProductError | Error, TContext>): number;
        /**
         * @summary Create a new product
         * @description Create a new product with payload containing product name, type, subtype, uom, price, cost, category, and description
         */
        isMutating<TContext>(filters?: MutationFiltersByParameters<CreateProductBody, CreateProductData, CreateProductParameters, CreateProductError | Error, TContext> | MutationFiltersByMutationKey<CreateProductSchema, CreateProductBody, CreateProductData, CreateProductParameters, CreateProductError | Error, TContext>): number;
        /**
         * @summary Create a new product
         * @description Create a new product with payload containing product name, type, subtype, uom, price, cost, category, and description
         */
        (options: ServiceOperationMutationFnOptions<CreateProductBody, CreateProductParameters>, client?: (schema: CreateProductSchema, options: ServiceOperationMutationFnOptions<CreateProductBody, CreateProductParameters>) => Promise<RequestFnResponse<CreateProductData, CreateProductError>>): Promise<RequestFnResponse<CreateProductData, CreateProductError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @summary Create a new product
         * @description Create a new product with payload containing product name, type, subtype, uom, price, cost, category, and description
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const createProductPendingMutationVariables = qraft.productService.createProduct.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const createProductMutationData = qraft.productService.createProduct.useMutationState({
         *     filters: {
         *         parameters: {}
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<CreateProductData, CreateProductError | Error, MutationVariables<CreateProductBody, CreateProductParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<CreateProductBody, CreateProductData, CreateProductParameters, CreateProductError | Error, TContext> | MutationFiltersByMutationKey<CreateProductSchema, CreateProductBody, CreateProductData, CreateProductParameters, CreateProductError | Error, TContext>;
            select?: (mutation: Mutation<CreateProductData, CreateProductError | Error, MutationVariables<CreateProductBody, CreateProductParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: CreateProductSchema;
        types: {
            parameters: CreateProductParameters;
            data: CreateProductData;
            error: CreateProductError;
            body: CreateProductBody;
        };
    };
}
export const productService: {
    /**
     * @summary Create a new product
     * @description Create a new product with payload containing product name, type, subtype, uom, price, cost, category, and description
     */
    createProduct: {
        schema: {
            method: "post";
            url: "/products/create_product";
            mediaType: [
                "application/json"
            ];
        };
    };
} = {
    createProduct: {
        schema: {
            method: "post",
            url: "/products/create_product",
            mediaType: ["application/json"]
        }
    }
};
type CreateProductSchema = {
    method: "post";
    url: "/products/create_product";
    mediaType: [
        "application/json"
    ];
};
type CreateProductParameters = {};
type CreateProductData = unknown;
type CreateProductError = unknown;
type CreateProductBody = NonNullable<paths["/products/create_product"]["post"]["requestBody"]>["content"]["application/json"];

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout.index'
import { Route as LayoutInventoryIndexImport } from './routes/_layout.inventory/index'
import { Route as LayoutInventoryUomsIndexImport } from './routes/_layout.inventory/uoms/index'
import { Route as LayoutInventoryCategoriesIndexImport } from './routes/_layout.inventory/categories/index'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutInventoryIndexRoute = LayoutInventoryIndexImport.update({
  id: '/inventory/',
  path: '/inventory/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutInventoryUomsIndexRoute = LayoutInventoryUomsIndexImport.update({
  id: '/inventory/uoms/',
  path: '/inventory/uoms/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutInventoryCategoriesIndexRoute =
  LayoutInventoryCategoriesIndexImport.update({
    id: '/inventory/categories/',
    path: '/inventory/categories/',
    getParentRoute: () => LayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/inventory/': {
      id: '/_layout/inventory/'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof LayoutInventoryIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/inventory/categories/': {
      id: '/_layout/inventory/categories/'
      path: '/inventory/categories'
      fullPath: '/inventory/categories'
      preLoaderRoute: typeof LayoutInventoryCategoriesIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/inventory/uoms/': {
      id: '/_layout/inventory/uoms/'
      path: '/inventory/uoms'
      fullPath: '/inventory/uoms'
      preLoaderRoute: typeof LayoutInventoryUomsIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutInventoryIndexRoute: typeof LayoutInventoryIndexRoute
  LayoutInventoryCategoriesIndexRoute: typeof LayoutInventoryCategoriesIndexRoute
  LayoutInventoryUomsIndexRoute: typeof LayoutInventoryUomsIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutInventoryIndexRoute: LayoutInventoryIndexRoute,
  LayoutInventoryCategoriesIndexRoute: LayoutInventoryCategoriesIndexRoute,
  LayoutInventoryUomsIndexRoute: LayoutInventoryUomsIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/inventory': typeof LayoutInventoryIndexRoute
  '/inventory/categories': typeof LayoutInventoryCategoriesIndexRoute
  '/inventory/uoms': typeof LayoutInventoryUomsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof LayoutIndexRoute
  '/inventory': typeof LayoutInventoryIndexRoute
  '/inventory/categories': typeof LayoutInventoryCategoriesIndexRoute
  '/inventory/uoms': typeof LayoutInventoryUomsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/inventory/': typeof LayoutInventoryIndexRoute
  '/_layout/inventory/categories/': typeof LayoutInventoryCategoriesIndexRoute
  '/_layout/inventory/uoms/': typeof LayoutInventoryUomsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/'
    | '/inventory'
    | '/inventory/categories'
    | '/inventory/uoms'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/inventory' | '/inventory/categories' | '/inventory/uoms'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/'
    | '/_layout/inventory/'
    | '/_layout/inventory/categories/'
    | '/_layout/inventory/uoms/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/",
        "/_layout/inventory/",
        "/_layout/inventory/categories/",
        "/_layout/inventory/uoms/"
      ]
    },
    "/_layout/": {
      "filePath": "_layout.index.tsx",
      "parent": "/_layout"
    },
    "/_layout/inventory/": {
      "filePath": "_layout.inventory/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/inventory/categories/": {
      "filePath": "_layout.inventory/categories/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/inventory/uoms/": {
      "filePath": "_layout.inventory/uoms/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
